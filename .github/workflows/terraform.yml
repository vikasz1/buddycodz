name: Deploy Azure Data Factory
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  terraform:
    name: Deploy ADF
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [dev, prod]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Parse Azure Credentials
        id: azure-creds
        run: |
          CREDS='${{ secrets.AZURE_CREDENTIALS }}'
          echo "::add-mask::$(echo $CREDS | jq -r .password)"
          echo "client_id=$(echo $CREDS | jq -r .appId)" >> $GITHUB_OUTPUT
          echo "client_secret=$(echo $CREDS | jq -r .password)" >> $GITHUB_OUTPUT
          echo "tenant_id=$(echo $CREDS | jq -r .tenant)" >> $GITHUB_OUTPUT

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ steps.azure-creds.outputs.client_id }}
          tenant-id: ${{ steps.azure-creds.outputs.tenant_id }}
          client-secret: ${{ steps.azure-creds.outputs.client_secret }}

      - name: Terraform Init
        run: |
          cd azure-infra/environments/${{ matrix.environment }}
          terraform init

      - name: Terraform Plan
        run: |
          cd azure-infra/environments/${{ matrix.environment }}
          ENV_UPPER=$(echo "${{ matrix.environment }}" | tr '[:lower:]' '[:upper:]')
          terraform plan -out=tfplan \
            -var "resource_group_name=${{ secrets[format('RESOURCE_GROUP_{0}', env.ENV_UPPER)] }}" \
            -var "location=${{ secrets[format('LOCATION_{0}', env.ENV_UPPER)] }}" \
            -var "adf_name=${{ secrets[format('ADF_NAME_{0}', env.ENV_UPPER)] }}"

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          cd azure-infra/environments/${{ matrix.environment }}
          terraform apply -auto-approve tfplan